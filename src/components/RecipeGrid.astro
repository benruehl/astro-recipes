---
import { getCollection, type CollectionEntry } from 'astro:content';
import RecipeCard from '../components/RecipeCard.astro';
import Grid from './Grid.astro';
import IngredientGrid from './IngredientGrid.astro';
import Card from './Box.astro';

type Recipe = CollectionEntry<'recipes'>;
type Category = Recipe["data"]["category"];

interface Props {
  activeRecipe?: Recipe;
}

const { activeRecipe } = Astro.props;

const allRecipes = await getCollection('recipes');

const categoryMap: { [id in Category ] : string } = {
    SideDish: "Beilagen",
    Salad: "Salate",
    Dressing: "Dressings"
};
const categories = Object.keys(categoryMap) as Array<keyof typeof categoryMap>;
---

{categories.map(category => (
    <h2>{categoryMap[category]}</h2>
    <hr/>
    <Grid minItemWidth="300px" maxColumns={3}>
        {allRecipes.filter(r => r.data.category === category).map(recipe => {
            return activeRecipe?.slug === recipe.slug ? (
                <RecipeCard recipe={recipe} isActive={true}/>
                <Card class="ingredient-box">
                    <IngredientGrid recipe={activeRecipe}/>
                </Card>
            ) : <RecipeCard recipe={recipe} isActive={activeRecipe ? false : null}/>
        })}
    </Grid>
))}

<style>
    .ingredient-box {
        grid-column: 1 / -1;
    }
</style>
