<script>
    import { throttle } from "@convergence/throttle-utils";

    // This runs on first page load and after every navigation.
    document.addEventListener("astro:page-load", () => {
        init();
    });

    function init() {
        const cards = document.querySelectorAll<HTMLElement>(".card");
        for (const card of cards) {
            card.addEventListener("mousemove", throttle(rotateByMouse.bind(card), 10));
            card.addEventListener("mouseout", stopRotate);
            card.addEventListener("mouseover", setActive);
            card.addEventListener("mouseout", setInactive);
            
            card.addEventListener("touchmove", throttle(rotateByTouch.bind(card), 10));
            card.addEventListener("touchend", stopRotate);
            card.addEventListener("touchstart", setActive);
            card.addEventListener("touchend", setInactive);
        }
    }

    function rotateByMouse(this: HTMLElement, e: MouseEvent) {
        this.style.transform = calcRotateTransform(this, e.clientX, e.clientY);
    }

    function rotateByTouch(this: HTMLElement, e: TouchEvent) {
        const touch = e.touches[0];
        this.style.transform = calcRotateTransform(this, touch.pageX, touch.pageY);
    }

    function calcRotateTransform(element: HTMLElement, cursorOnPagePosX: number, cursorOnPagePosY: number) {
        const halfHeight = element.offsetHeight / 2;
        const halfWidth = element.offsetWidth / 2;

        const rect = element.getBoundingClientRect();
        const cursorX = cursorOnPagePosX - rect.left;
        const cursorY = cursorOnPagePosY - rect.top;

        return "rotateX(" +
            -(cursorY - halfHeight) / element.offsetHeight * 10 +
            "deg) rotateY(" +
            (cursorX - halfWidth) / element.offsetWidth * 20 +
            "deg)"
    }

    function stopRotate(this: HTMLElement) {
        this.style.transform = "rotate(0)";
    }

    function setActive(this: HTMLElement) {
        this.classList.add("card-3d--focused");
    }

    function setInactive(this: HTMLElement) {
        this.classList.remove("card-3d--focused");
    }
</script>

<div class="card-container">
    <div class="card">
        <slot/>
    </div>
</div>

<style lang="scss">
    .card-container {
        perspective: 1000px;
        transform-style: preserve-3d;
        overflow: clip;
        border-radius: 1rem;
    }

    .card {
        transform-style: preserve-3d;
        transition: transform 0.1s;

        width: 100%;
        height: 100%;
    }
</style>
