---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import Card3D from '../card-3d/Card3D.astro';
import CardContent from '../card-3d/CardContent.astro';
import NewCardBackground from './NewCardBackground.astro';
import NewRecipeCardContent from './NewRecipeCardContent.astro';

type Recipe = CollectionEntry<'recipes'>;

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<Card3D>
    <a class="card-layout" href=`${baseUrl}/recipes/${recipe.slug}`>
        <NewCardBackground
            startColor={recipe.data.background?.startColor}
            endColor={recipe.data.background?.endColor}
        />
        {recipe.data.imageLayers?.map((img, index) => (
            <CardContent translateZ={(index + 1) * 10}>
                <Image
                    src={img}
                    alt={recipe.data.title}
                    transition:name={`recipe-image-${recipe.data.title}`}
                />
            </CardContent>
        ))}
        <CardContent class="card-bottom" translateZ={45}>
            <NewRecipeCardContent recipe={recipe}/>
        </CardContent>
    </a>
</Card3D>

<style lang="scss">

    .card-layout {
        display: grid;
        grid-template-areas: "overlay";
        transform-style: preserve-3d;
        width: 340px;
        aspect-ratio: 57 / 89;

        :global(> *) {
            grid-area: overlay;
            min-width: 0;
        }

        .card-bottom {
            align-self: flex-end;
        }
    }

    img {
        box-sizing: border-box;
        padding: 3rem 0;
        width: 100%;
        max-width: 100%;
        object-fit: contain;
        object-position: center;
    }

    a {
        all: unset;
        cursor: pointer;
        position: relative;

        &:hover,
        &:focus-visible {
            img {
                transform: scale(1.015);
            }
        }
    }
</style>