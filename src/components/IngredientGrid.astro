---
import type { CollectionEntry } from 'astro:content';
import IngredientCard from './IngredientCard.astro';

type Recipe = CollectionEntry<'recipes'>;

interface Props {
  recipe: Recipe;
  direction: "horizontal" | "vertical";
}

const { recipe, direction } = Astro.props;

const largeIngredients = recipe.data.ingredients
    .filter(ingredient => ingredient.hasOwnProperty("amount"));
const smallIngredients = recipe.data.ingredients
    .filter(ingredient => !ingredient.hasOwnProperty("amount"));

const largeIngredientsColumns =
    smallIngredients.length <= 3 ? 5 :
        largeIngredients.length % 3 === 0 ? 3 :
            largeIngredients.length % 2 === 0 ? 2 : 3;

const getRandomInt = (max: number) => {
    return Math.floor(Math.random() * max);
}
---

<div class="container">
    <div class:list={["ingredient-grid-large", `ingredient-grid--${direction}`]}>
        {largeIngredients.map(ingredient => (
            <IngredientCard {ingredient} {direction} size="large" backgroundRotationDeg={getRandomInt(360)}/>
        ))}
    </div>
    <div class:list={["ingredient-grid-small", `ingredient-grid--${direction}`]}>
        {smallIngredients.map(ingredient => (
            <IngredientCard {ingredient} {direction} size="small" backgroundRotationDeg={getRandomInt(360)}/>
        ))}
    </div>
</div>

<style lang="scss" define:vars={{
    "large-ingredients-columns": largeIngredientsColumns
}}>
    .container {
        display: flex;
        gap: 1rem;
    }

    img {
        width: calc(100% + 1rem);
        height: auto;
        aspect-ratio: 16 / 9;
        object-fit: cover;
        border-radius: .8rem;
        margin: -0.5rem;
    }

    p {
        margin: 0;
        color: rgb(var(--text-light));
    }

    .ingredient-grid-large {
        display: grid;
        grid-template-columns: repeat(var(--large-ingredients-columns), auto);
        grid-auto-flow: row;
        align-content: flex-start;
        gap: .5rem;

        &.ingredient-grid--vertical {
            flex-direction: column;
        }
    }

    .ingredient-grid-small {
        display: flex;
        align-items: flex-start;
        align-content: center;
        flex-wrap: wrap;
        gap: .5rem;

        &.ingredient-grid--vertical {
            flex-direction: column;
        }
    }
</style>